<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Portainer安装</title>
      <link href="/post/13d4b70d.html"/>
      <url>/post/13d4b70d.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Portainer是一个开源的Docker管理工具，它可以帮助用户在Web界面上轻松地管理Docker容器、镜像、卷和网络等。  </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>确认已经安装了<code>Docker</code>和<code>Docker Compose</code>，如果没有，请先安装。</p></li><li><p>在终端中输入以下命令，从Docker Hub上下载Portainer的最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull portainer/portainer-ce</span><br></pre></td></tr></table></figure></li><li><p>创建一个新的Docker容器并运行Portainer：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d \</span><br><span class="line">    -p 8000:8000 \</span><br><span class="line">    -p 9000:9000 \</span><br><span class="line">    --name portainer \</span><br><span class="line">    --restart always \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \ </span><br><span class="line">    -v portainer_data:/data \</span><br><span class="line">    portainer/portainer-ce  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释一下上面的命令：</p><ul><li><code>-d</code> 参数表示以后台模式运行容器</li><li><code>-p</code> 参数将主机的端口映射到容器的端口，例如 <code>-p 8000:8000</code> 将主机的8000端口映射到容器的8000端口</li><li><code>--name</code> 参数指定容器的名称为 <code>portainer</code></li><li><code>--restart always</code> 参数表示容器在崩溃或重启后将自动重新启动</li><li><code>-v</code> 参数将主机的目录或文件夹挂载到容器中，例如 <code>-v /var/run/docker.sock:/var/run/docker.sock</code> 将主机的Docker socket文件挂载到容器中，方便容器访问宿主机的Docker引擎</li><li><code>portainer/portainer-ce</code> 是要运行的Docker镜像的名称</li></ul></li><li><p>打开Web浏览器，访问 <code>http://localhost:9000</code>，按照界面上的提示设置管理员账号和密码，然后就可以开始使用Portainer了。</p><p><em>注意：如果使用的是远程服务器，则需要将 <code>localhost</code> 替换为服务器的IP地址或域名。另外，建议在使用Portainer之前先了解Docker的基本概念和使用方法。</em></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的安装与配置</title>
      <link href="/post/661ecc9.html"/>
      <url>/post/661ecc9.html</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><p>Nginx是一款高性能的Web服务器和反向代理服务器，它可以处理高并发的请求，同时还支持负载均衡、HTTP缓存和动态HTTP请求等功能。Nginx的设计理念是高并发、低消耗、高可靠性和易扩展，因此在大型网站的应用非常广泛。</p><p>Nginx的主要作用包括：</p><ol><li>Web服务器：Nginx可以作为Web服务器，处理HTTP请求，向客户端提供静态或动态的Web内容。</li><li>反向代理服务器：Nginx可以作为反向代理服务器，将客户端请求转发到后端服务器，处理后端服务器的响应结果并返回给客户端。</li><li>负载均衡器：Nginx可以作为负载均衡器，将客户端请求分发到多个后端服务器，实现负载均衡，提高系统的可扩展性和稳定性。</li><li>HTTP缓存服务器：Nginx可以作为HTTP缓存服务器，缓存静态文件和动态文件，提高Web应用的响应速度和性能。</li><li>TCP&#x2F;UDP代理服务器：Nginx还可以作为TCP&#x2F;UDP代理服务器，处理TCP&#x2F;UDP请求，实现代理和转发功能。</li></ol><p>具体使用方式详见 <a href="http://nginx.org/en/">官网</a> , 对于个人而言，一般是用来设置SSL证书，让域名代理的主机地址能通过<code>https</code>访问。</p><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><ul><li><a href="https://github.com/nginx/nginx">nginx&#x2F;nginx</a><br>官方项目，使用方式略繁琐，网上的一些教程过时不好用，最好配合官网说明使用。  </li><li><a href="https://github.com/NginxProxyManager/nginx-proxy-manager">NginxProxyManager</a><br>基于Docker的可视化操作Web界面，配置简单明了。十分推荐！  </li><li><a href="chishin/nginx-proxy-manager-zh">nginx-proxy-manager-zh</a><br>NginxProxyManager的汉化版</li></ul><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><p>系统：<code>Ubuntu 20.04 x64</code><br>已安装程序：<code>Docker</code> <code>Docker-Compose</code><br>使用功能：<code>SSL</code> </p><ol><li><p>创建<code>docker-compose.yml</code>文件，内容如下：  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>进入到对应文件目录，输入指令并运行：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#If using docker-compose-plugin</span></span><br><span class="line"><span class="string">docker</span> <span class="string">compose</span> <span class="string">up</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure></li><li><p>配置防火墙<br>Ubuntu20 默认开启了防火墙，且默认端口均为开放，所以相关应用程序端口一定要加入白名单，不然就各种问题！</p></li></ol><ul><li>允许HTTP<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 80</span><br></pre></td></tr></table></figure></li><li>允许HTTPS<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 443</span><br></pre></td></tr></table></figure></li><li>允许Nginx管理WebUI<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 81</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>登录WebUI<br><a href="http://hostname(主机ip地址):81/">http://hostname(主机IP地址):81</a><br>默认账户 </p><pre><code>Email:    admin@example.comPassword: changeme</code></pre><p>初次登录后会要求修改默认账户名和密码</p></li><li><p>配置SSL<br><img src="/../img/Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/ssl.png" alt="Alt text"><br>进入<code>SSL Certificates</code> 面板，点击 <code>Add SSL Certificate</code>，如果有域名证书的选择 <code>Custom</code> ,输入备注名称上传对应证书文件和密钥即可；没有证书的也可以选择 <code>Let&#39;s Encrypt</code>自行申请免费证书。<br><em>注：域名证书可在域名供应商那里申请到免费的，以阿里云来说，每个域名明年可申请20张免费证书。</em> </p></li><li><p>配置代理<br><img src="/../img/Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/hosts.png" alt="Alt text"><br>进入 <code>Hosts</code> 面板选择 Proxy Host，点击 <code>Add Proxy Host</code> ,按照如下示例配置：<br> <img src="/../img/Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/ssl03.png" alt="Alt text"><br>保存后，你就可以通过配有证书的域名以 <code>https</code> 的方式访问对应主机端口的应用了。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里只以Nginx的SSL功能举例，也是本人常用的一个功能。但对于Nginx来说，该功能只是冰山一角，更多的功能使用待各位自行发掘。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT的微信和qq接入</title>
      <link href="/post/1082c8d6.html"/>
      <url>/post/1082c8d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="ChatGPT账号注册"><a href="#ChatGPT账号注册" class="headerlink" title="ChatGPT账号注册"></a>ChatGPT账号注册</h2><ul><li><p>通过在线SMS服务选择OpenAI支持的手机号完成账号注册<br>  <a href="https://chat.openai.com/">ChatGPT官网</a> （需代理）<br>  <a href="https://sms-activate.org/">SMS虚拟手机号码服务</a><br>  此处提供的sms服务需要付费，大概1$不到。网上也能找到免费的，不过质量层次不齐，不保证能接收到验证码，出于节省时间的目的，还是更推荐付费的。 </p></li><li><p>获取API为其他通讯方式的接入做准备<br>   <img src="/../img/ChatGPT%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%92%8Cqq%E6%8E%A5%E5%85%A5/API_KEY.png" alt="Alt text"><br>  进入 <a href="https://platform.openai.com/account/api-keys">OpenAI API</a> ，点击创建新的 key ，API key的调用是要收费的，具体收费方式详见官网，每个账号有 <code>5$</code> 的额度，个人使用还是足够的，多人使用推荐上 plus 版本。</p></li></ul><h2 id="微信接入"><a href="#微信接入" class="headerlink" title="微信接入"></a>微信接入</h2><p>主要还是通过GitHub开源项目进行接入，具体接入方式详见各自项目的说明文档  </p><ul><li>个人微信接入 <a href="https://github.com/limccn/chatgpt-on-wechat">chatgpt-on-wechat</a>  </li><li>公众号接入  <a href="https://github.com/zhayujie/bot-on-anything">bot-on-anything</a></li></ul><h2 id="QQ接入"><a href="#QQ接入" class="headerlink" title="QQ接入"></a>QQ接入</h2><ol><li>部署qq登录程序  <a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a><br>通讯方式选用反向代理，即 <code>severs</code> 部分的配置选用 <code>ws-reverse</code> 设置参数。服务器监听的地址需要与 <code>chatpgt-mirai-qq-bot</code> 的运行地址和端口保持一致。</li><li>对接ChatGPT  <a href="https://github.com/lss233chatgpt-mirai-qq-bot">chatgpt-mirai-qq-bot</a><br>该项目支持多种AI的调用方式，具体细节详见官方说明文档。</li></ol><blockquote><p>今年算是AI的爆发元年了，井喷式的AI工具涌现而出。最近一直在琢磨着将 AI 融入工作和生活，浅尝之下，不得不感叹AI带来的高效与便利。而如何更好的融合和使用这些AI工具，应该是未来几年需要持续摸索的一件事情了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> Bot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI绘画</title>
      <link href="/post/a01715fb.html"/>
      <url>/post/a01715fb.html</url>
      
        <content type="html"><![CDATA[<h2 id="主流AI绘画工具"><a href="#主流AI绘画工具" class="headerlink" title="主流AI绘画工具"></a>主流AI绘画工具</h2><ul><li><p>Stable Diffusion</p></li><li><p>MidJourney</p></li><li><p>Waifu Diffusion</p></li><li><p>PicUP.AI</p></li><li><p>其他</p><p><strong>Stable Diffusion</strong> </p><p>简称“ SD ”，Stable Diffusion 是一种基于潜在扩散模型的 AI 模型，它可以生成图像，也可以通过文本提示修改现有图像，类似于 MidJourney 或 DALL-E 2。它最初是由 Stability.ai 在 2022 年 8 月发布的。它可以理解数千个不同的单词，并且可以用几乎任何风格创建几乎任何形象.</p><p>Stable Diffusion 是一种深度生成神经网络，其代码和模型权重已公开发布，可以在大多数配备至少 8 GB VRAM 的消费级硬件上运行。</p><p><strong>MidJourney</strong> </p><p>MidJourney 是一种基于 GAN 技术的 AI 绘画工具，它可以生成高质量的图像和艺术作品。它可以通过输入一些简单的文本提示，生成各种不同的图像，包括人物、动物、风景等。MidJourney 的特点是生成的图像非常逼真，可以与真实的照片媲美。</p><p><strong>Waifu Diffusion</strong></p><p>Waifu Diffusion 是一种基于 StyleGAN 技术的 AI 绘画工具，它可以生成各种不同的动漫风格的图像。它的特点是生成的图像非常逼真，可以与真实的动漫人物媲美。Waifu Diffusion 可以通过输入一些简单的文本提示，生成各种不同的动漫人物图像，包括男性、女性、萝莉等。</p><p><strong>PicUP.AI</strong></p><p>PicUP.AI 是一种基于 GAN 技术的 AI 绘画工具，它可以生成各种不同的图像和艺术作品。它可以通过输入一些简单的文本提示，生成各种不同的图像，包括人物、动物、风景等。PicUP.AI 的特点是生成的图像非常逼真，可以与真实的照片媲美。</p><p><strong>其他</strong></p><p>除了上述几种主流的 AI 绘画工具之外，还有许多其他的工具，如 DALL-E2、Artbreeder、GANbreeder 等。这些工具都是基于 GAN 或其他 AI 技术的，可以生成各种不同的图像和艺术作品。它们的特点是生成的图像非常逼真，可以与真实的照片媲美。</p></li></ul><h2 id="工具使用说明"><a href="#工具使用说明" class="headerlink" title="工具使用说明"></a>工具使用说明</h2><h3 id="Stable-Diffusion"><a href="#Stable-Diffusion" class="headerlink" title="Stable Diffusion"></a>Stable Diffusion</h3><h4 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h4><ul><li><p>方式一 : GitHub源码（需梯子）    <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">AUTOMATIC1111&#x2F;stable-diffusion-webui</a>  </p></li><li><p>方式二 : 一键整合包，开箱即用   <a href="https://www.bilibili.com/video/BV17d4y1C73R/?spm_id_from=333.999.0.0">秋葉aaaki（推荐）</a></p></li></ul><h4 id="操作界面说明"><a href="#操作界面说明" class="headerlink" title="操作界面说明"></a>操作界面说明</h4><p>  <img src="/../img/AI%E7%BB%98%E7%94%BB/%E7%95%8C%E9%9D%A2UI%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.jpg" alt="Alt text">  </p><ul><li><p><strong>Stable Duffusion 模型(ckpt)</strong><br> 大模型是数据训练出来的结果，决定了生成图片的美术风格以及它擅长的绘画面。资源可以在网上下载，根据自己的喜好挑选模型。<br> 对应本地资源存放目录 <code>.../models/Stable-diffusion</code>  </p></li><li><p><strong>模型的 VAE(SD VAE)</strong><br> VAE 的主要作用是滤镜，决定了生成图像的色彩饱和度；虽然也有局部修正的作用，但作用效果不明显。有些大模型不用 VAE 直出的图像是灰色的，有些模型则不用，如果模型有配套的VAE,则推荐使用配套的。这部分建议多去尝试与组合，寻找自己的喜欢的风格色彩。<br> 对应本地资源存放目录 <code>.../models/VAE</code></p></li><li><p><strong>提示词(Prompt)</strong><br> 输入自己想要画面元素的关键词(tags)，这里用英文输入，中文输入效果不理想。<br> <code>() 抬升权重</code> 一个 () 权重 * 1.1，多个 (()) 大量抬升<br> <code>[] 降低权重</code> 一个 [] 权重 &#x2F; 1.1<br> <code>(tag:1.2) 赋予权重</code>  权重 * 1.2，还可以(sliver,pink:0.9)表示银色和粉色的比例是 9:1 ,这样可以表现为银色头发的发梢是粉色的<br> <code>[tagA:tagB:step] 分布描绘</code> 到达指定步数前执行 tagA ,到达后，执行 tagB 。Step&gt;1 时，表示步数；Step&lt;1 时，表示占比<br> <code>tagA|tagB 融合描绘</code> 例如 (whrite hair|blue hair)表示白色头发与蓝色头发的发色融合</p></li><li><p><strong>反向提示词(Negative prompt)</strong><br> 输入自己不想要的画面元素关键词</p></li><li><p><strong>采样迭代步数(Steps)</strong><br> 字面意思，理论上迭代次数越多效果越好</p></li><li><p><strong>采样方法(Sampler)</strong><br> 不同采样方法出图的速度和效果不同，一般倾向于用 <code>Euler a</code> <code>DPM++ 2M Karras</code> <code>DPM++SDE Karras</code> 这三种，其他方法可自行尝试。  </p></li><li><p><strong>面部修复</strong><br>推荐勾选，可以提升比较不错的面部效果出图率  </p></li><li><p><strong>高清修复</strong><br>   不推荐勾选，会影响出图效率。可以等出了自己满意的效果图后，再用自带的<code>附加功能</code>进行放大。</p></li></ul><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul><li><p><strong>Embedding (textual inversion)</strong><br>  嵌入&#x2F;文本反转，通俗理解：提示词打包，类似与提示词组的概念，可以使用别人已经打包好的tags,用于生成固定特征的人或事物。  </p></li><li><p><strong>Lora (Low-Rank Adaptation of Large Language Models)</strong><br> 大语言模型的低阶适应，是微软的研究人员为了解决大语言模型微调而开发的一项技术。<br> 主要功能：对人物和物品的复刻。通过挂载lora，复刻图片上的指定细节特征，无论是动作还是画风。目前使用比较火热，最新的SD_WebUI已经内置。  </p></li><li><p><strong>Hypernetwork</strong><br>  超网格，可以理解为低配版Lora，主要用来训练画风。</p></li><li><p><strong><a href="https://github.com/lllyasviel/ControlNet">ControlNet</a></strong><br>  是一种通过添加额外条件来控制扩散模型的神经网络结构，可以从线稿、姿态、深度、色彩等方面对参考图片进行预处理，从而更精确得到我们想要的图片特征。<br>  <code>进阶教程</code><br>  <a href="https://www.bilibili.com/video/BV1Wo4y1i77v/?spm_id_from=333.999.0.0&vd_source=8139a2177a04c86c89bc6e136b97f87c">Controlnet的安装与使用</a><br>   <a href="https://www.bilibili.com/video/BV1gk4y1h7xF/?vd_source=8139a2177a04c86c89bc6e136b97f87c">Controlnet+Lora 人设三视图</a></p></li></ul><h4 id="资源站点"><a href="#资源站点" class="headerlink" title="资源站点"></a>资源站点</h4><ul><li>C 站： <a href="https://civitai.com/">https://civitai.com/</a>  </li><li>Pixai 图站： <a href="https://pixai.art/">https://pixai.art/</a>  </li><li>Finding.Art 图站： <a href="https://finding.art/">https://finding.art/</a>  </li><li>AIGODLIKE ： <a href="https://www.aigodlike.com/">https://www.aigodlike.com/</a></li><li>NovelAI.Dev ： <a href="https://novelai.dev/">https://novelai.dev/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 绘画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes</title>
      <link href="/post/c0da8988.html"/>
      <url>/post/c0da8988.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本页面主要用来记录一些琐碎问题  </p></blockquote><h2 id="Twikoo"><a href="#Twikoo" class="headerlink" title="Twikoo"></a><a href="https://twikoo.js.org/">Twikoo</a></h2><ul><li>存在问题：按照官方文档部署完成后，本地测试无问题，但是正式部署到云端服务器后，无法正常运作。</li><li>问题排查：服务器地址云函数运行正常，浏览器中按 F12 发现有报错 <code>This request has been blocked; the content must be served over HTTPS.</code> 该云函数是通过<code>http</code>协议访问的，会被浏览器拦截，本地测试运行则不会。</li><li>解决方案：通过<a href="http://kchris1027.github.io/post/13d4b70d.html">Nginx的安装与配置</a>，配置SSL证书走<code>https</code>协议访问。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docs 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
